
---user and auth ---
CREATE TABLE users(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

    --auth ---
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,

    --person info ---
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),

    ---address --
    address_line1 VARCHAR(160),
    address_line2 VARCHAR(160),
    city VARCHAR(160),
    state_province VARCHAR(160),
    postal_code VARCHAR(160),
    country_code VARCHAR(2),
    CONSTRAINT chk_users_country_code CHECK (country_code IS NULL OR country_code ~ '^[A-Z]{2}$' ),

    -- role ---------
    role VARCHAR(20) NOT NULL DEFAULT 'CUSTOMER',
    CONSTRAINT chk_users_role CHECK (role IN ('CUSTOMER', 'AUTHOR', 'STAFF', 'ADMIN')),

    ---flags & timestamps
    is_verified BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX idx_users_country_code ON users(country_code);
CREATE INDEX idx_users_role ON users(role);

---- One-time email verification tokens (hashed)
CREATE TABLE email_verification_tokens (
    token_hash CHAR(64) PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    expires_at TIMESTAMPTZ NOT NULL,
    used_at TIMESTAMPTZ
);
CREATE INDEX idx_evt_user ON email_verification_tokens(user_id);
CREATE INDEX idx_evt_expires ON email_verification_tokens(expires_at);

------ Password reset tokens (hashed)
CREATE TABLE password_reset_tokens(
    token_hash CHAR(64) PRIMARY KEY,
    user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
    expires_at TIMESTAMPTZ NOT NULL,
    used_at TIMESTAMPTZ
);
CREATE INDEX idx_prt_user ON password_reset_tokens(user_id);
CREATE INDEX idx_prt_expires ON password_reset_tokens(expires_at);




 --Tour packages
CREATE TABLE tour_packages(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    slug VARCHAR(128) NOT NULL UNIQUE,
    title VARCHAR(128) NOT NULL,
    summary TEXT,
    price_cents INTEGER NOT NULL,
    days INTEGER NOT NULL CHECK(days>=1),
    create_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

--Itinerary --- day-by-day plan inside a package
CREATE TABLE itinerary_items(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    tour_package_id BIGINT NOT NULL REFERENCES tour_packages(id) ON DELETE CASCADE,
    day_number INTEGER NOT NULL CHECK(day_number >= 1),
    title VARCHAR(160) NOT NULL,
    description TEXT,
    start_location VARCHAR(160),
    end_location VARCHAR(160),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    -- combination of package + day must be unique (no duplicate Day 2 for the same package)
    CONSTRAINT uq_package_id_day UNIQUE(tour_package_id, day_number)
);
--for: WHERE tour_package_id = ? ORDER BY day_number
CREATE INDEX idx_itinerary_pkg_day ON itinerary_items(tour_package_id, day_number);

---- Blog table -------------
CREATE TABLE blog_posts(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    slug VARCHAR(128) NOT NULL UNIQUE,
    title VARCHAR(128) NOT NULL,
    excerpt TEXT,
    content TEXT NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'DRAFT', -- DRAFT/PUBLISHED
    published_at TIMESTAMPTZ,

    --cover-img ---------
    cover_img_url VARCHAR(512),
    cover_img_alt VARCHAR(160),

    ---author-- might be null when drafting ----
    author_user_id BIGINT REFERENCES users(id) ON DELETE SET NULL,

    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT chk_blog_status CHECK(status IN ('DRAFT', 'PUBLISHED'))
);
CREATE INDEX idx_blog_author_user ON blogs_posts(author_user_id);

--------gallery images per post ---
CREATE TABLE blog_images(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    blog_id BIGINT NOT NULL REFERENCES blogs_posts(id) ON DELETE CASCADE,
    image_url VARCHAR(512) NOT NULL,
    alt_text VARCHAR(160),
    caption TEXT,
    sort_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT uq_post_image_order UNIQUE (blog_id, sort_order)
);

--------- favorites (wishlist) ----------------

CREATE TABLE user_favorites(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    tour_package_id BIGINT NOT NULL REFERENCES tour_packages(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT uq_user_favorite UNIQUE (user_id, tour_package_id)
);


------ DEPARTURES (date-bound inventory/pricing) --clients see available packages, dates of departure & available seats---
CREATE TABLE package_departures(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    tour_package_id BIGINT NOT NULL REFERENCES tour_packages(id) ON DELETE CASCADE,
    start_date DATE NOT NULL CHECK ,
    end_date DATE NOT NULL check(end_date >= start_date),
    seats_total INTEGER CHECK (seats_total IS NULL OR seats_total >=0),
    seats_available INTEGER CHECK (seats_available IS NULL OR (seats_total IS NOT NULL AND seats_available >=0 AND seats_available <= seats_total )),
    price_cents_override INTEGER CHECK(price_cents_override IS NULL OR price_cents_override>0),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE INDEX idx_departures_pkg_date ON package_departures(tour_package_id, start_date);


---------- Bookings & payments --------------
CREATE TABLE bookings(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
    status VARCHAR(24) NOT NULL, --DRAT, PAYT PENDING, PAID, CANCELLED, REFUNDED---
    currency CHAR(3) NOT NULL DEFAULT 'USD', --TODO will have to adjust this depending on user location
    total_cents INTEGER NOT NULL DEFAULT 0 CHECK (total_cents >=0),
    notes TEXT,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT chk_booking_status CHECK(status IN ('DRAFT', 'PENDING_PAYMENT', 'CANCELED', 'REFUNDED', 'PAID'))
);

CREATE TABLE booking_items(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    booking_id BIGINT NOT NULL REFERENCES bookings(id) ON DELETE CASCADE,
    tour_package_id BIGINT NOT NULL REFERENCES tour_packages(id) ON DELETE RESTRICT,
    package_departure_id BIGINT NOT NULL REFERENCES package_departures(id) ON DELETE SET NULL,
    quantity INTEGER NOT NULL DEFAULT 1 CHECK (quantity >=1),
    unit_price_cents INTEGER NOT NULL CHECK (unit_price_cents >=0),
    line_total_cents INTEGER NOT NULL CHECK (line_total_cents >=0),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE payments(
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    booking_id BIGINT NOT NULL REFERENCES bookings(id) ON DELETE CASCADE,
    provider VARCHAR(100) NOT NULL, -- eg STRIPE
    provider_payment_intent_id VARCHAR(128) NOT NULL,
    amount_cents INTEGER NOT NULL CHECK (amount_cents >=0),
    currency CHAR(3) NOT NULL,
    status VARCHAR(24) NOT NULL, -- REQUIRES_ACTION, SUCCEEDED, FAILED, REFUNDED...--
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (provider, provider_payment_intent_id)
);